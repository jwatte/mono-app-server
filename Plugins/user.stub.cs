//  implementation of interface user version 2010-12-28 23:00
//  auto-generated by apimono

using IMVU.IDL;
using System;
using System.Collections.Generic;
using entity;

namespace api
{

public class user {

    public dict create(IContext ctx, idstring userid, password password, varchar realname, email email)
    {
        dict Return = new dict();
        // your code goes here; add return values to 'Return'
		bool status = false;
		string message = "unknown error";
		long pver;
		if (userid.str.Length < 5 || !Helpers.IsValidId(userid.str))
		{
			message = "bad user id format: non-special characters, at least length 5 required";
		}
		else if (KeyValueStore.Find("user:" + userid, out pver) != null)
		{
			message = "the user id " + userid + " already exists";
		}
		else if (KeyValueStore.Find("email:" + email, out pver) != null)
		{
			message = "the email address " + email + " is already tied to another user id";
		}
		else
		{
			dict user = new dict();
			user.Add("userid", userid.str);
			user.Add("password", password.str);
			user.Add("realname", realname.str);
			user.Add("email", email.str);
			user.Add("activationkey", Helpers.RandomString(24));
			if (KeyValueStore.Store("user:"+userid, user, 0))
			{
				message = "user " + userid + " created";
				status = true;
			}
			else
			{
				message = "database error when trying to create user " + userid;
			}
		}
        Return.Add("status", status);
        Return.Add("message", message);
        return Return;
    } // create


    public dict activate(IContext ctx, idstring userid, varchar activationkey)
    {
        dict Return = new dict();
        // your code goes here; add return values to 'Return'
		bool status = false;
		long pver;
		dict u = KeyValueStore.Find("user:" + userid, out pver);
		if (u != null && activationkey.str.Length == 24)
		{
			if (u["activationkey"].Equals(activationkey.str))
			{
				u["activationkey"] = "";
				status = KeyValueStore.Store("user:" + userid, u, pver);
			}
		}
        Return.Add("status", status);
        return Return;
    } // activate


    public dict deactivate(IContext ctx, idstring userid)
    {
        dict Return = new dict();
        // your code goes here; add return values to 'Return'
        Return.Add("status", Helpers.Default<bool>());
        Return.Add("activationkey", Helpers.Default<varchar>());
        return Return;
    } // deactivate


    public dict get(IContext ctx, idstring userid)
    {
        dict Return = new dict();
        // your code goes here; add return values to 'Return'
        Return.Add("status", Helpers.Default<bool>());
        Return.Add("realname", Helpers.Default<varchar>());
        Return.Add("email", Helpers.Default<email>());
        Return.Add("activationkey", Helpers.Default<varchar>());
        Return.Add("permissions", Helpers.Default<list>());
        return Return;
    } // get


    public dict grant(IContext ctx, idstring userid, idstring permission)
    {
        dict Return = new dict();
        // your code goes here; add return values to 'Return'
        Return.Add("status", Helpers.Default<bool>());
        return Return;
    } // grant


    public dict revoke(IContext ctx, idstring userid, idstring permission)
    {
        dict Return = new dict();
        // your code goes here; add return values to 'Return'
        Return.Add("status", Helpers.Default<bool>());
        return Return;
    } // revoke


    public dict test(IContext ctx, idstring userid, idstring permission)
    {
        dict Return = new dict();
        // your code goes here; add return values to 'Return'
        Return.Add("status", Helpers.Default<bool>());
        return Return;
    } // test

}; // class

} // namespace

//  end of user
