using System;
using System.Xml;
using IMVU.IDL;
using System.IO;

namespace apimono
{
	class MainClass
	{
		public static void Main (string[] args)
		{
			if ((args.Length != 3 && args.Length != 2) || args[0][0] == '-')
			{
				Console.WriteLine("Usage: apimono input.xml output.idl.cs [output.stub.cs]");
				return;
			}
			XmlDocument xd = new XmlDocument();
			xd.Load(args[0]);
			MemoryStream idls = new MemoryStream();
			MemoryStream ms = new MemoryStream();
			using (StreamWriter idl = new StreamWriter(idls))
			{
				using (StreamWriter stub = new StreamWriter(ms))
				{
					XmlNode rootNode = xd.FirstChild.NextSibling;
					if (rootNode.Name == "interface")
					{
						EmitInterface(rootNode, idl, stub);
					}
					else if (rootNode.Name == "entity")
					{
						EmitEntity(rootNode, idl, stub);
					}
					else
					{
						Console.WriteLine("Unknown IDL root format: {0}", rootNode.Name);
						throw new InvalidDataException("Bad XML input file");
					}
					idl.Flush();
					using (Stream swi = new FileStream(args[1], FileMode.Create))
					{
						int len = (int)idls.Length;
						byte[] odata = idls.GetBuffer();
						swi.Write(odata, 0, len);
					}
					if (args.Length == 3)
					{
						stub.Flush();
						if (File.Exists(args[2]))
						{
							Console.WriteLine("Not overwriting existing stub: {0}", args[2]);
						}
						else
						{
							using (Stream sw = new FileStream(args[2], FileMode.CreateNew))
							{
								int len = (int)ms.Length;
								byte[] odata = ms.GetBuffer();
								sw.Write(odata, 0, len);
							}
						}
					}
				}
			}
		}
		
		public static void EmitInterface(XmlNode itf, StreamWriter idl, StreamWriter stub)
		{
			string iname = Helpers.AttributeStr(itf, "name");
			string iversion = Helpers.AttributeStr(itf, "version");
			idl.WriteLine("//  interface {0}", iname);
			idl.WriteLine("//  auto-generated by apimono");
			idl.WriteLine("");
			idl.WriteLine("using IMVU.IDL;");
			idl.WriteLine("using ApiParameter = IMVU.IDL.ApiMethod.ApiParameter;");
			idl.WriteLine("");
			idl.WriteLine("public class {0} : WrapperBase {1}", iname, "{");
			idl.WriteLine("    public {0}() : base(\"{1}\") {2}", iname, iname, "{}");
			idl.WriteLine("    public override string Version() {0} return \"{1}\"; {2}",
			              "{", iversion, "}");
			idl.WriteLine("    public override void Initialize() {0}", "{");
			idl.WriteLine("        InstallMethods(new ApiMethod[] {0}", "{");
			
			stub.WriteLine("//  implementation of interface {0} version {1}", iname, iversion);
			stub.WriteLine("//  auto-generated by apimono");
			stub.WriteLine("");
			stub.WriteLine("using IMVU.IDL;");
			stub.WriteLine("using System;");
			stub.WriteLine("using System.Collections.Generic;");
			stub.WriteLine("");
			stub.WriteLine("public class {0} {1}", iname, "{");
			
			foreach (XmlNode xn in itf.SelectNodes("method"))
			{
				string mname = Helpers.AttributeStr(xn, "name");
				idl.WriteLine("    new ApiMethod(\"{0}\", // name", mname);
				bool mauth = Helpers.AttributeBool(xn, "session", true);
				string mtype = Helpers.AttributeStr(xn, "type", "dict");
				idl.WriteLine("        {0}, // session", mauth ? "true" : "false");
				idl.WriteLine("        new string[] {0} // permissions", "{");
				foreach (XmlNode pn in xn.SelectNodes("permission"))
				{
					string pname = Helpers.AttributeStr(pn, "name");
                    string self = Helpers.AttributeStr(pn, "self", "");
                    if (self.Length > 0)
                    {
                        if (null == xn.SelectSingleNode("parameter[@name='"+self+"']"))
                        {
                            throw new ArgumentException("permission self attribute references parameter " + 
                                self + " which is not declared (method " + mname + ")");
                        }
                        idl.WriteLine("            \"self={0}|{1}\",", self, pname);
                    }
                    else
                    {
                        idl.WriteLine("            \"{0}\",", pname);
                    }
				}
				idl.WriteLine("        {0},", "}");
				idl.WriteLine("        Services.{0}f, // formatter", Helpers.AttributeStr(xn, "formatter", "json"));
				idl.WriteLine("        new ApiParameter[] {0} // parameters", "{");
				
				stub.WriteLine("");
				stub.Write("    public {1} {0}(IContext ctx", mname, mtype);
				
				foreach (XmlNode an in xn.SelectNodes("parameter"))
				{
					string pname = Helpers.AttributeStr(an, "name");
					idl.WriteLine("            new ApiParameter(\"{0}\", // name", pname);
					string ptype = Helpers.AttributeStr(an, "type");
					idl.WriteLine("                Services.Types.t_{0} // type", ptype);
					idl.WriteLine("                ),");
					
					stub.Write(", {0} {1}", ptype, pname);
				}
				idl.WriteLine("            {0}), // ApiMethod", "}");
				
				stub.WriteLine(")");
				stub.WriteLine("    {0}", "{");
				stub.WriteLine("        dict Return = new {0}();", mtype);
				stub.WriteLine("        // your code goes here; add return values to 'Return'");
				if (mtype == "dict")
				{
					foreach (XmlNode rn in xn.SelectNodes("return"))
					{
						string rname = Helpers.AttributeStr(rn, "name");
						string rtype = Helpers.AttributeStr(rn, "type");
						stub.WriteLine("        Return.Add(\"{0}\", Helpers.Default<{1}>());", rname, rtype);
					}
				}
				else if (xn.SelectNodes("return").Count > 0)
				{
					throw new InvalidDataException("Method " + mname + " of type " + mtype + " cannot have a 'return' element.");
				}
				stub.WriteLine("        return Return;");
				stub.WriteLine("    {0} // {1}", "}", mname);
				stub.WriteLine("");
			}
			idl.WriteLine("            {0}); // InstallMethods", "}");
			idl.WriteLine("    {0}", "}");
			idl.WriteLine("{0}", "}");
			idl.WriteLine("");
			idl.WriteLine("//  end of {0}", iname);

			stub.WriteLine("{0}; // class", "}");
		}
		
		public static void EmitEntity(XmlNode itf, StreamWriter idl, StreamWriter stub)
		{
			throw new NotImplementedException("EmitEntity() not implemented");
		}
	}
}
